name: Terraform Deploy

on:
    workflow_dispatch: {}

permissions:
    contents: write

jobs:
    terraform-plan:
        runs-on: ubuntu-latest
        outputs:
          installation_id: ${{ steps.get_installation_id.outputs.INSTALLATION_ID }}
        steps:
          - name: Checkout code
            uses: actions/checkout@v4

          - name: Set up Python
            uses: actions/setup-python@v5
            with:
              python-version: "3.11"

          - name: Install Python deps
            run: pip install google-api-python-client google-auth google-auth-httplib2 requests pyjwt cryptography

          - name : Fetch Google Sheet -> snapshot.json
            env:
              GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
              SHEET_ID: ${{ secrets.SHEET_ID }}
              TAB_REPOS: ${{ secrets.TAB_REPOS }}
              TAB_MEMBERS: ${{ secrets.TAB_MEMBERS }}
              TAB_TEAMS: ${{ secrets.TAB_TEAMS }}
              TAB_TEAM_MEMBERS: ${{ secrets.TAB_TEAM_MEMBERS }}
              TAB_BRANCHES: ${{ secrets.TAB_BRANCHES }}
              TAB_USER_PERMISSIONS: ${{ secrets.TAB_USER_PERMISSIONS }}
              TAB_TEAM_PERMISSIONS: ${{ secrets.TAB_TEAM_PERMISSIONS }}
              TAB_ADMINS: ${{ secrets.TAB_ADMINS }}
              TAB_CODEOWNERS: ${{ secrets.TAB_CODEOWNERS }}
              TAB_ENVIRONMENTS: ${{ secrets.TAB_ENVIRONMENTS }}
              OUTPUT_PATH: data/snapshot.json
            run: python scripts/sheet_to_snapshot.py

          - name: Get GitHub App Installation ID
            id: get_installation_id
            env:
              APP_ID: ${{ secrets.APP_ID }}
              APP_PEM: ${{ secrets.APP_PEM }}
              ORGANIZATION: ${{ secrets.ORGANIZATION }}
            run: echo "INSTALLATION_ID=$(python scripts/get_installation_id.py)" >> "$GITHUB_OUTPUT"

          - name: Set up Terraform
            uses: hashicorp/setup-terraform@v2
            with:
              cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}
              terraform_version: "1.12.2"

          - name: Terraform Init
            run: terraform init

          - name: Terraform Plan
            env:
              TF_VAR_github_organization: ${{ secrets.ORGANIZATION }}
              TF_VAR_app_id: ${{ secrets.APP_ID }}
              TF_VAR_app_installation_id: ${{ steps.get_installation_id.outputs.INSTALLATION_ID }}
              TF_VAR_app_pem_file: ${{ secrets.APP_PEM }}
              TF_VAR_config_path: data/snapshot.json
            run: |
              terraform plan -out=tfplan 
              terraform show -no-color tfplan > tfplan.txt

          - name: Upload plan artifact
            uses: actions/upload-artifact@v4
            with:
              name: tfplan
              retention-days: 1
              path: |
                tfplan
                tfplan.txt
                data/snapshot.json
          
          - name: Add plan to job summary
            run: |
              echo '### Terraform Plan' >> $GITHUB_STEP_SUMMARY
              echo '<details><summary>Show output</summary>' >> $GITHUB_STEP_SUMMARY
              echo '' >> $GITHUB_STEP_SUMMARY
              echo '```text' >> $GITHUB_STEP_SUMMARY
              cat tfplan.txt >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo '</details>' >> $GITHUB_STEP_SUMMARY

    terraform-apply:
      needs: terraform-plan
      runs-on: ubuntu-latest
      environment: deploy-terraform
      steps:
        - uses: actions/checkout@v4
        - uses: actions/download-artifact@v4
          with:
            name: tfplan
            path: .

        - name: Set up Terraform
          uses: hashicorp/setup-terraform@v2
          with:
            cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}
            terraform_version: "1.12.2"

        - name: Terraform Init
          run: terraform init

        - name: Terraform Apply 
          if: github.ref == 'refs/heads/main'   # only apply on main branch (optional safety)
          env:
            TF_VAR_github_organization: ${{ secrets.ORGANIZATION }}
            TF_VAR_app_id: ${{ secrets.APP_ID }}
            TF_VAR_app_installation_id: ${{ needs.terraform-plan.outputs.installation_id }}
            TF_VAR_app_pem_file: ${{ secrets.APP_PEM }}
            TF_VAR_config_path: data/snapshot.json
          run: terraform apply -auto-approve tfplan
