# ===============================================================
# Deploy Backend (Fargate)
# ---------------------------------------------------------------

# PREREQUISITES IN AWS (one-time)
# - ECR repo 
# - ECS cluster 
# - Fargate-based. ECS service 
# - ECS task definition FAMILY with a container whose name equals CONTAINER_NAME
# - A GitHub OIDC-trusted IAM role exists (AWS_ROLE_ARN) with permissions:
#   * sts:AssumeRoleWithWebIdentity (trusts token.actions.githubusercontent.com)
#   * ECS: describe/register task defs, update service, etc.
#   * ECR: get-login, push/pull images

#
# REQUIRED GITHUB SECRETS / VARS
# - secrets.AWS_ROLE_ARN         → IAM role ARN to assume via OIDC
# - secrets.AWS_REGION           → AWS region (e.g., us-east-1)
# - secrets.ECR_REPOSITORY       → ECR repository name (not URI)
# - secrets.ECS_CLUSTER          → ECS cluster name
# - secrets.ECS_SERVICE          → ECS service name
# - secrets.ECS_TASK_FAMILY      → ECS task definition family name
# - secrets.CONTAINER_NAME       → Container name inside the task definition
# - vars.APP_DIR                 → Path to folder containing Dockerfile (e.g., ./github-backend-test)
# ===============================================================

name: Deploy Backend (Fargate)

on:
  push:
    branches:
      - 'development'
    paths:
      - '.github/workflows/deploy-backend-development.yml'

env:
  APP_DIR: ${{ vars.APP_DIR }}        # folder to build
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}  # must match TD container name exactly
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    environment: ${{ github.ref_name }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region:     ${{ secrets.AWS_REGION }}

      - id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image
        env:
          REGISTRY: ${{ steps.ecr.outputs.registry }}
        run: |
          docker build -t "$REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG" "$APP_DIR"
          docker push "$REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG"

      - name: Fetch current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition "${{ secrets.ECS_TASK_FAMILY }}" \
            --query taskDefinition > taskdef.json

      - name: Render task definition (swap image for the right container)
        id: taskdef
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: taskdef.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Show the image we will deploy (sanity check)
        run: |
          cat "${{ steps.taskdef.outputs.task-definition }}" | jq -r '.containerDefinitions[] | .name + " -> " + .image'

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.taskdef.outputs.task-definition }}   # <— use rendered output
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true